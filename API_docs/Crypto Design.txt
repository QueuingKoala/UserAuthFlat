UserAuthFlat: Crypto Design

(Best viewed with word wrap enabled)

OVERVIEW

The overall design of the hashing in the UAF library mimics PBKDF2 with some minor alterations. All data hashing is performed using the Windows internal CryptoAPI functionality provided by the OS. The salt is a 128-bit binary value generated in-script with the PRNG.

CODE REFERENCE

The crypto-specific core functions are:
	_UAF_PerformHashing() - returns a hash as an ANSI-formatted hex-representation
	_UAF_XorSum() - helper-function to stream XOR 2 binary inputs
	_UAF_GenerateSalt() - returns a PRNG-generated salt in binary form

DESCRIPTION OF HASHING METHOD

The _UAF_PerformHashing() function is designed with the structure of PBKDF2 in mind.

A specified-number of rounds (>=1, and theoretically unbounded) as well as the hash algorithm, password, and salt, are passed as inputs. All hash operations are performed using the specified algorithm.

First, an IV is generated by hashing the salt, called ‘hash’. For the specified number of rounds, a ‘newhash’ is generated by appending the binary-representation of the password with the ‘hash’ value. Then, the ‘hash’ and ‘newhash’ values are stream-XOR’d together and stored as ‘hash’. Finally, the ANSI-string representation of the final ‘hash’ value is returned.

DIFFERENCES FROM PBKDF2

The primary differences from a PBKDF2 implementation are:

1) The salt is fully PRNG-data; there is no need to append a counter value since we are generating a ‘key’ that is the hash length explicitly (thus the counter would always read 1, and we get more random bits by omitting it.)

2) The IV is generated by hashing the salt directly instead of appending it into the first-round data to hash. This is primarily out of convenience to extend (or reduce, if non-standard salt sizes are defined) the salt to match the hash output for stream-XOR operation.

3) The conversion of the password to binary and appending the former binary-hash-value is functionally similar, but not identical to the PBKDF2 implementation.